<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
    <meta charset="UTF-8">
    <title>New Order</title>
    <%- include('../partials/head'); %>
</head>

<body>
<%- include('../partials/header'); %>

<section class="section">


    <div class="order-heading-wrap">
        <h3 id="order-header-pt1">Custom Emoji, only $15</h3>
        <h3 id="order-header-pt2">Enter your MyMoji Details</h3>
        <p id="order-header-pt3">We will email you when the MyMoji is ready</p>
    </div>
    <form id="orderForm" class="order-form">
        <div class="order-form-inner-wrapper">
            <div class="input-wrapper">
                <label for="order-name">Name</label>
                <input id="order-name" type="text" class="text-field" placeholder="Name" required>
            </div>
            <div class="input-wrapper">
                <label for="order-email">Email</label>
                <input id="order-email" autocomplete="email" type="email" class="text-field" placeholder="Email"
                       required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$">
            </div>
            <div class="input-wrapper">
                <p>What would you like us to know when making your MyMoji (optional)</p>
                <label class="label" for="other-information"></label>
                <textarea id="other-information" type="text" class="text-field" rows="4" cols="50"></textarea>
                <p>Note: We can only include one person or animal in your emoji. Also, the artists work with the
                    close-up you send, so we don't allow you to say "give me cool sunglasses." But if you want
                    to,
                    get some cool sunglasses and upload a new close-up, that will work.</p>
                <div>
                    <p class="paragraph-bigger ">Upload a close-up!</p>
                    <img class="preview-image" src="#" id="blah" alt="">
                    <div class="image-upload-wrapper">
                        <input type="file" name="upload" id="image-upload" accept="image/*"
                               placeholder="Select File" required onchange="return validateFileUpload()">
                        <label for="image-upload" class="image-upload-wrapper--label-left">Select File</label>
                    </div>


                    <button class="button blue pay-button" id="pay">Pay</button>
                </div>

            </div>


        </div>


    </form>


</section>
<%- include('../partials/footer'); %>
<%- include('../partials/scripts');%>

<script src="https://js.stripe.com/v3/"></script>
<script charset="UTF-8">
	// Create an instance of the Stripe object with your publishable API key
	let stripe;
	fetch('/config')
		.then((response) => response.json())
		.then((data) => {
			stripe = Stripe(data.publicKey);
		})
		.catch((error) => {
			console.error('Error: ', error);
		});

	let checkoutButton = document.getElementById('pay');

	checkoutButton.addEventListener('click', async function (e) {
		if (!validateForm()) {
			console.log("input invalid returning");
			return;
		} else {
			console.log('input valid continuing to fetch');
		}
		e.preventDefault();

		let formData = new FormData();
		const name = document.getElementById("order-name");
		const email = document.getElementById("order-email");
		const notes = document.getElementById("other-information");
		const fuData = document.getElementById('image-upload');

		const imageFile = fuData.files[0];

		formData.append("name", name.value);
		formData.append("email", email.value);
		formData.append("notes", notes.value);

		const options = {
			maxSizeMB: 1,
			maxWidthOrHeight: 1920,
			useWebWorker: true
		}
		try {
			const compressedFile = await imageCompression(imageFile, options);
			formData.append("upload", compressedFile);
		} catch (error) {
			console.log(error);
			alert("OOPS! Something went wrong");
		}


		fetch('/create-checkout-session', {
			method: 'POST',
			body: formData

		})
			.then(function (response) {
				console.log(response);
				return response.json();
			})
			.then(function (session) {
				console.log('session', session);
				return stripe.redirectToCheckout({sessionId: session.sessionId});
			})
			.then(function (result) {
				// If `redirectToCheckout` fails due to a browser or network
				// error, you should display the localized error message to your
				// customer using `error.message`.
				if (result.error) {
					alert(result.error.message);
				}
			})
			.catch(function (error) {
				console.error('Error:', error);
			});
	});



	function validateForm() {
		let valid = true;
		const name = document.getElementById("order-name");

		if (name.value.length === 0) {
			document.getElementById("order-name").classList.add('is-invalid');
			name.setCustomValidity("Please enter your name");
			valid = false;
		} else {
			document.getElementById("order-name").classList.remove('is-invalid');
			name.setCustomValidity("");
		}

		const email = document.getElementById("order-email");
		let mailFormat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
		if (!email.value.match(mailFormat)) {
			document.getElementById("order-email").classList.add('is-invalid');
			email.setCustomValidity("Please enter a valid Email Address");
			valid = false;
		} else {
			document.getElementById("order-email").classList.remove('is-invalid');
			email.setCustomValidity("");
		}

		if (!validateFileUpload()) {
			valid = false;
		}

		return valid;
	}


</script>

</body>

</html>
